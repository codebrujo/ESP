/*
   esp-geiger.ino

   This code runs on ESP8266 MCU board for interaction with the Aliexpress RadiationD-v1.1 (CAJOE) Geiger counter board
   and reports readings in CPM (Counts Per Minute) to Blynk server.

   Author: Sergei Ogarkov

   Based on initial work of Mark A. Heckler (@MkHeck, mark.heckler@gmail.com) and Andreas Spiess.

   License: MIT License

   Please use freely with attribution. Thank you!
*/


#include <WiFi.h>
#include <WiFiClientSecure.h>
#include <SSD1306.h>
#include "settings.h" // or define mySSID and myPASSWORD and THINGSPEAK_API_KEY

#define LOG_PERIOD 20000 //Logging period in milliseconds
#define MINUTE_PERIOD 60000
#define WIFI_TIMEOUT_DEF 30

#ifndef SETTINGS
// WLAN
#define ssid "SSID"
#define pass "password"
// BLYNK
#define auth "blynk project key"
#endif

IPAddress ip;

WiFiClient client;

WiFiClientSecure secure_client;
SSD1306  display(0x3c, D1, D2);

volatile unsigned long counts = 0;                       // Tube events
unsigned long cpm = 0;                                   // CPM
unsigned long previousMillis;                            // Time measurement
const int inputPin = 7;
unsigned int thirds = 0;
unsigned long minutes = 1;
unsigned long start = 0;

#define LOG_PERIOD 20000 //Logging period in milliseconds
#define MINUTE_PERIOD 60000

void ISR_impulse() { // Captures count of events from Geiger counter board
  counts++;
}

void displayInit() {
  display.init();
  display.flipScreenVertically();
  display.setFont(ArialMT_Plain_24);
}

void setup() {
  Serial.begin(115200);
  displayInit();
  displayString("Welcome", 64, 15);
  Serial.println("Connecting to Wi-Fi");

  WiFi.begin(ssid, pass);

  int wifi_loops = 0;
  int wifi_timeout = WIFI_TIMEOUT_DEF;
  while (WiFi.status() != WL_CONNECTED) {
    wifi_loops++;
    Serial.print(".");
    delay(500);
    if (wifi_loops > wifi_timeout)
    {
      software_Reset();
    }
  }
  Serial.println();
  Serial.println("Wi-Fi Connected");
  display.clear();
  displayString("Measuring", 64, 15);
  pinMode(inputPin, INPUT);                                                // Set pin for capturing Tube events
  interrupts();                                                            // Enable interrupts
  attachInterrupt(digitalPinToInterrupt(inputPin), ISR_impulse, FALLING); // Define interrupt on falling edge
  unsigned long clock1 = millis();
  start = clock1;
}


void displayString(String dispString, int x, int y) {
  display.setColor(WHITE);
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.drawString(x, y, dispString);
  display.setFont(ArialMT_Plain_24);
  display.display();
}


/****reset***/
void software_Reset() // Restarts program from beginning but does not reset the peripherals and registers
{
  Serial.print("resetting");
  ESP.restart();
}


void displayInt(int dispInt, int x, int y) {
  display.setColor(WHITE);
  display.setTextAlignment(TEXT_ALIGN_CENTER);
  display.drawString(x, y, String(dispInt));
  display.setFont(ArialMT_Plain_24);
  display.display();
}

void loop() {

  unsigned long currentMillis = millis();

  if (WiFi.status() != WL_CONNECTED)
  {
    software_Reset();
  }

  if (currentMillis - previousMillis > LOG_PERIOD) {

    previousMillis = currentMillis;

    cpm = counts * MINUTE_PERIOD / LOG_PERIOD;
    //cpm=105;
    counts = 0;
    display.clear();
    displayString("Radioactivity", 64, 0);
    displayInt(cpm, 64, 30);
    //if (cpm > 100 ) IFTTT( EVENT_NAME, cpm);
  }
  // Serial.print("minutes: ");
  // Serial.println(String(minutes));

  //cpm = counts * MINUTE_PERIOD / LOG_PERIOD; this is just counts times 3 so:

  cpm = counts / minutes;
  Serial.print("Total clicks since start: ");
  Serial.println(String(counts));
  Serial.print("Rolling CPM: ");
  Serial.println(String(cpm));

  //    if ( thirds > 2) {
  //      counts = 0;
  //      thirds = 0;
  //    }


}
